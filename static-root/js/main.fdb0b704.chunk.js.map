{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newValue","current","value","tempNewTweets","unshift","content","likes","id","console","log","ref","required","name","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootEl","document","getElementById","tweetRootEl","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fdb0b704.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport {loadTweets} from \"../lookup\";\n\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const newValue = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newValue,\n            likes: 7,\n            id: 1234\n        })\n        setNewTweets(tempNewTweets)\n        console.log(newValue)\n        textAreaRef.current.value = \"\"\n    }\n\n    return <div className={props.className}>\n        <div className=\"col-12 mb-3\">\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className=\"form-control\" name=\"tweet\">\n\n                </textarea>\n                <button type=\"submit\" className=\"btn btn-primary my-3\">Tweet</button>\n            </form>\n        </div>\n        <TweetList newTweets={newTweets}/>\n    </div>\n}\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweetsInit, tweets])\n    useEffect(() => {\n        const tweetLoadCallback = (response, status) => {\n          if (status === 200) {\n            setTweetsInit(response)\n          } else {\n            alert(\"Something went wrong...\")\n          }\n        }\n        loadTweets(tweetLoadCallback)\n    }, [])\n    return tweets.map((item, index)=>{\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\n    })\n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true)\n    const actionDisplay = action.display ? action.display : \"Action\"\n    const display = action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === \"like\") {\n            if (userLike === true) {\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n\nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className=\"btn btn-group\">\n            <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}}/>\n            <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}}/>\n            <ActionBtn tweet={tweet} action={{type: \"retweet\", display: \"Retweet\"}}/>\n        </div>\n    </div>\n}","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://127.0.0.1:8000/api/tweets/'\n\n    xhr.responseType = 'json'\n    xhr.open(method, url)\n    xhr.onload = function() {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n        console.log(e)\n        callback(\"Error occurred\", 400)\n    }\n    xhr.send()\n}","import logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from \"./tweets\"\n\n\nconst rootEl = document.getElementById('root')\nconst tweetRootEl = document.getElementById('tweet-root')\nif (rootEl) {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      rootEl\n    );\n}\nif (tweetRootEl) {\n    ReactDOM.render(\n      <React.StrictMode>\n        <TweetsComponent />\n      </React.StrictMode>,\n      tweetRootEl\n    );\n}\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}